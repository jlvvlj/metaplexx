{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlError } from \"../error\";\nexport class IdlCoder {\n  static fieldLayout(field, types) {\n    const fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n\n    switch (field.type) {\n      case \"bool\":\n        {\n          return borsh.bool(fieldName);\n        }\n\n      case \"u8\":\n        {\n          return borsh.u8(fieldName);\n        }\n\n      case \"i8\":\n        {\n          return borsh.i8(fieldName);\n        }\n\n      case \"u16\":\n        {\n          return borsh.u16(fieldName);\n        }\n\n      case \"i16\":\n        {\n          return borsh.i16(fieldName);\n        }\n\n      case \"u32\":\n        {\n          return borsh.u32(fieldName);\n        }\n\n      case \"i32\":\n        {\n          return borsh.i32(fieldName);\n        }\n\n      case \"u64\":\n        {\n          return borsh.u64(fieldName);\n        }\n\n      case \"i64\":\n        {\n          return borsh.i64(fieldName);\n        }\n\n      case \"u128\":\n        {\n          return borsh.u128(fieldName);\n        }\n\n      case \"i128\":\n        {\n          return borsh.i128(fieldName);\n        }\n\n      case \"bytes\":\n        {\n          return borsh.vecU8(fieldName);\n        }\n\n      case \"string\":\n        {\n          return borsh.str(fieldName);\n        }\n\n      case \"publicKey\":\n        {\n          return borsh.publicKey(fieldName);\n        }\n\n      default:\n        {\n          // @ts-ignore\n          if (field.type.vec) {\n            return borsh.vec(IdlCoder.fieldLayout({\n              name: undefined,\n              // @ts-ignore\n              type: field.type.vec\n            }, types), fieldName); // @ts-ignore\n          } else if (field.type.option) {\n            return borsh.option(IdlCoder.fieldLayout({\n              name: undefined,\n              // @ts-ignore\n              type: field.type.option\n            }, types), fieldName); // @ts-ignore\n          } else if (field.type.defined) {\n            // User defined type.\n            if (types === undefined) {\n              throw new IdlError(\"User defined types not provided\");\n            } // @ts-ignore\n\n\n            const filtered = types.filter(t => t.name === field.type.defined);\n\n            if (filtered.length !== 1) {\n              throw new IdlError(`Type not found: ${JSON.stringify(field)}`);\n            }\n\n            return IdlCoder.typeDefLayout(filtered[0], types, fieldName); // @ts-ignore\n          } else if (field.type.array) {\n            // @ts-ignore\n            let arrayTy = field.type.array[0]; // @ts-ignore\n\n            let arrayLen = field.type.array[1];\n            let innerLayout = IdlCoder.fieldLayout({\n              name: undefined,\n              type: arrayTy\n            }, types);\n            return borsh.array(innerLayout, arrayLen, fieldName);\n          } else {\n            throw new Error(`Not yet implemented: ${field}`);\n          }\n        }\n    }\n  }\n\n  static typeDefLayout(typeDef, types, name) {\n    if (typeDef.type.kind === \"struct\") {\n      const fieldLayouts = typeDef.type.fields.map(field => {\n        const x = IdlCoder.fieldLayout(field, types);\n        return x;\n      });\n      return borsh.struct(fieldLayouts, name);\n    } else if (typeDef.type.kind === \"enum\") {\n      let variants = typeDef.type.variants.map(variant => {\n        const name = camelCase(variant.name);\n\n        if (variant.fields === undefined) {\n          return borsh.struct([], name);\n        } // @ts-ignore\n\n\n        const fieldLayouts = variant.fields.map(f => {\n          // @ts-ignore\n          if (f.name === undefined) {\n            throw new Error(\"Tuple enum variants not yet implemented.\");\n          } // @ts-ignore\n\n\n          return IdlCoder.fieldLayout(f, types);\n        });\n        return borsh.struct(fieldLayouts, name);\n      });\n\n      if (name !== undefined) {\n        // Buffer-layout lib requires the name to be null (on construction)\n        // when used as a field.\n        return borsh.rustEnum(variants).replicate(name);\n      }\n\n      return borsh.rustEnum(variants, name);\n    } else {\n      throw new Error(`Unknown type kint: ${typeDef}`);\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAEA,OAAM,MAAOC,QAAP,CAAe;AACM,SAAXC,WAAW,CAACC,KAAD,EAAkBC,KAAlB,EAAsC;AAC7D,UAAMC,SAAS,GACbF,KAAK,CAACG,IAAN,KAAeC,SAAf,GAA2BT,SAAS,CAACK,KAAK,CAACG,IAAP,CAApC,GAAmDC,SADrD;;AAEA,YAAQJ,KAAK,CAACK,IAAd;AACE,WAAK,MAAL;AAAa;AACX,iBAAOT,KAAK,CAACU,IAAN,CAAWJ,SAAX,CAAP;AACD;;AACD,WAAK,IAAL;AAAW;AACT,iBAAON,KAAK,CAACW,EAAN,CAASL,SAAT,CAAP;AACD;;AACD,WAAK,IAAL;AAAW;AACT,iBAAON,KAAK,CAACY,EAAN,CAASN,SAAT,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACa,GAAN,CAAUP,SAAV,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACc,GAAN,CAAUR,SAAV,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACe,GAAN,CAAUT,SAAV,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACgB,GAAN,CAAUV,SAAV,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACiB,GAAN,CAAUX,SAAV,CAAP;AACD;;AACD,WAAK,KAAL;AAAY;AACV,iBAAON,KAAK,CAACkB,GAAN,CAAUZ,SAAV,CAAP;AACD;;AACD,WAAK,MAAL;AAAa;AACX,iBAAON,KAAK,CAACmB,IAAN,CAAWb,SAAX,CAAP;AACD;;AACD,WAAK,MAAL;AAAa;AACX,iBAAON,KAAK,CAACoB,IAAN,CAAWd,SAAX,CAAP;AACD;;AACD,WAAK,OAAL;AAAc;AACZ,iBAAON,KAAK,CAACqB,KAAN,CAAYf,SAAZ,CAAP;AACD;;AACD,WAAK,QAAL;AAAe;AACb,iBAAON,KAAK,CAACsB,GAAN,CAAUhB,SAAV,CAAP;AACD;;AACD,WAAK,WAAL;AAAkB;AAChB,iBAAON,KAAK,CAACuB,SAAN,CAAgBjB,SAAhB,CAAP;AACD;;AACD;AAAS;AACP;AACA,cAAIF,KAAK,CAACK,IAAN,CAAWe,GAAf,EAAoB;AAClB,mBAAOxB,KAAK,CAACwB,GAAN,CACLtB,QAAQ,CAACC,WAAT,CACE;AACEI,kBAAI,EAAEC,SADR;AAEE;AACAC,kBAAI,EAAEL,KAAK,CAACK,IAAN,CAAWe;AAHnB,aADF,EAMEnB,KANF,CADK,EASLC,SATK,CAAP,CADkB,CAYlB;AACD,WAbD,MAaO,IAAIF,KAAK,CAACK,IAAN,CAAWgB,MAAf,EAAuB;AAC5B,mBAAOzB,KAAK,CAACyB,MAAN,CACLvB,QAAQ,CAACC,WAAT,CACE;AACEI,kBAAI,EAAEC,SADR;AAEE;AACAC,kBAAI,EAAEL,KAAK,CAACK,IAAN,CAAWgB;AAHnB,aADF,EAMEpB,KANF,CADK,EASLC,SATK,CAAP,CAD4B,CAY5B;AACD,WAbM,MAaA,IAAIF,KAAK,CAACK,IAAN,CAAWiB,OAAf,EAAwB;AAC7B;AACA,gBAAIrB,KAAK,KAAKG,SAAd,EAAyB;AACvB,oBAAM,IAAIP,QAAJ,CAAa,iCAAb,CAAN;AACD,aAJ4B,CAK7B;;;AACA,kBAAM0B,QAAQ,GAAGtB,KAAK,CAACuB,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACtB,IAAF,KAAWH,KAAK,CAACK,IAAN,CAAWiB,OAA1C,CAAjB;;AACA,gBAAIC,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,oBAAM,IAAI7B,QAAJ,CAAa,mBAAmB8B,IAAI,CAACC,SAAL,CAAe5B,KAAf,CAAqB,EAArD,CAAN;AACD;;AACD,mBAAOF,QAAQ,CAAC+B,aAAT,CAAuBN,QAAQ,CAAC,CAAD,CAA/B,EAAoCtB,KAApC,EAA2CC,SAA3C,CAAP,CAV6B,CAW7B;AACD,WAZM,MAYA,IAAIF,KAAK,CAACK,IAAN,CAAWyB,KAAf,EAAsB;AAC3B;AACA,gBAAIC,OAAO,GAAG/B,KAAK,CAACK,IAAN,CAAWyB,KAAX,CAAiB,CAAjB,CAAd,CAF2B,CAG3B;;AACA,gBAAIE,QAAQ,GAAGhC,KAAK,CAACK,IAAN,CAAWyB,KAAX,CAAiB,CAAjB,CAAf;AACA,gBAAIG,WAAW,GAAGnC,QAAQ,CAACC,WAAT,CAChB;AACEI,kBAAI,EAAEC,SADR;AAEEC,kBAAI,EAAE0B;AAFR,aADgB,EAKhB9B,KALgB,CAAlB;AAOA,mBAAOL,KAAK,CAACkC,KAAN,CAAYG,WAAZ,EAAyBD,QAAzB,EAAmC9B,SAAnC,CAAP;AACD,WAbM,MAaA;AACL,kBAAM,IAAIgC,KAAJ,CAAU,wBAAwBlC,KAAK,EAAvC,CAAN;AACD;AACF;AAnGH;AAqGD;;AAE0B,SAAb6B,aAAa,CACzBM,OADyB,EAEzBlC,KAFyB,EAGzBE,IAHyB,EAGZ;AAEb,QAAIgC,OAAO,CAAC9B,IAAR,CAAa+B,IAAb,KAAsB,QAA1B,EAAoC;AAClC,YAAMC,YAAY,GAAGF,OAAO,CAAC9B,IAAR,CAAaiC,MAAb,CAAoBC,GAApB,CAAyBvC,KAAD,IAAU;AACrD,cAAMwC,CAAC,GAAG1C,QAAQ,CAACC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,CAAV;AACA,eAAOuC,CAAP;AACD,OAHoB,CAArB;AAIA,aAAO5C,KAAK,CAAC6C,MAAN,CAAaJ,YAAb,EAA2BlC,IAA3B,CAAP;AACD,KAND,MAMO,IAAIgC,OAAO,CAAC9B,IAAR,CAAa+B,IAAb,KAAsB,MAA1B,EAAkC;AACvC,UAAIM,QAAQ,GAAGP,OAAO,CAAC9B,IAAR,CAAaqC,QAAb,CAAsBH,GAAtB,CAA2BI,OAAD,IAA4B;AACnE,cAAMxC,IAAI,GAAGR,SAAS,CAACgD,OAAO,CAACxC,IAAT,CAAtB;;AACA,YAAIwC,OAAO,CAACL,MAAR,KAAmBlC,SAAvB,EAAkC;AAChC,iBAAOR,KAAK,CAAC6C,MAAN,CAAa,EAAb,EAAiBtC,IAAjB,CAAP;AACD,SAJkE,CAKnE;;;AACA,cAAMkC,YAAY,GAAGM,OAAO,CAACL,MAAR,CAAeC,GAAf,CAAoBK,CAAD,IAA0B;AAChE;AACA,cAAIA,CAAC,CAACzC,IAAF,KAAWC,SAAf,EAA0B;AACxB,kBAAM,IAAI8B,KAAJ,CAAU,0CAAV,CAAN;AACD,WAJ+D,CAKhE;;;AACA,iBAAOpC,QAAQ,CAACC,WAAT,CAAqB6C,CAArB,EAAwB3C,KAAxB,CAAP;AACD,SAPoB,CAArB;AAQA,eAAOL,KAAK,CAAC6C,MAAN,CAAaJ,YAAb,EAA2BlC,IAA3B,CAAP;AACD,OAfc,CAAf;;AAiBA,UAAIA,IAAI,KAAKC,SAAb,EAAwB;AACtB;AACA;AACA,eAAOR,KAAK,CAACiD,QAAN,CAAeH,QAAf,EAAyBI,SAAzB,CAAmC3C,IAAnC,CAAP;AACD;;AAED,aAAOP,KAAK,CAACiD,QAAN,CAAeH,QAAf,EAAyBvC,IAAzB,CAAP;AACD,KAzBM,MAyBA;AACL,YAAM,IAAI+B,KAAJ,CAAU,sBAAsBC,OAAO,EAAvC,CAAN;AACD;AACF;;AAlJkB","names":["camelCase","borsh","IdlError","IdlCoder","fieldLayout","field","types","fieldName","name","undefined","type","bool","u8","i8","u16","i16","u32","i32","u64","i64","u128","i128","vecU8","str","publicKey","vec","option","defined","filtered","filter","t","length","JSON","stringify","typeDefLayout","array","arrayTy","arrayLen","innerLayout","Error","typeDef","kind","fieldLayouts","fields","map","x","struct","variants","variant","f","rustEnum","replicate"],"sourceRoot":"","sources":["../../../src/coder/idl.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}