{"ast":null,"code":"import { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\nexport default class Provider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  static defaultOptions() {\n    return {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n  }\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static local(url, opts) {\n    opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n    const connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  }\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static env() {\n    if (isBrowser) return;\n\n    const process = require(\"process\");\n\n    const url = process.env.ANCHOR_PROVIDER_URL;\n\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n\n    const options = Provider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, options);\n  }\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async send(tx, signers, opts) {\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n    const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    return txId;\n  }\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n\n\n  async sendAll(reqs, opts) {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = reqs.map(r => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n      signers.filter(s => s !== undefined).forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n    }\n\n    return sigs;\n  }\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async simulate(tx, signers, opts) {\n    var _a, _b;\n\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    return await simulateTransaction(this.connection, tx, (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment);\n  }\n\n}\n/**\n * Node only wallet.\n */\n\nexport class NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n\n  static local() {\n    const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(require(\"os\").homedir() + \"/.config/solana/id.json\", {\n      encoding: \"utf-8\"\n    }))));\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n\n} // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = {\n    encoding: \"base64\",\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n\n  return res.result;\n}\n/**\n * Sets the default provider on the client.\n */\n\n\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\n\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n} // Global provider used as the default when a provider is not given.\n\nlet _provider = null;","map":{"version":3,"mappings":"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","names":["Connection","Keypair","sendAndConfirmRawTransaction","isBrowser","Provider","constructor","connection","wallet","opts","defaultOptions","preflightCommitment","commitment","local","url","NodeWallet","env","process","require","ANCHOR_PROVIDER_URL","undefined","Error","options","send","tx","signers","feePayer","publicKey","recentBlockhash","getRecentBlockhash","blockhash","signTransaction","filter","s","forEach","kp","partialSign","rawTx","serialize","txId","sendAll","reqs","txs","map","r","signedTxs","signAllTransactions","sigs","k","length","push","simulate","_a","simulateTransaction","_b","payer","fromSecretKey","Buffer","from","JSON","parse","readFileSync","homedir","encoding","t","transaction","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","args","res","_rpcRequest","error","message","result","setProvider","provider","_provider","getProvider"],"sourceRoot":"","sources":["../../src/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}