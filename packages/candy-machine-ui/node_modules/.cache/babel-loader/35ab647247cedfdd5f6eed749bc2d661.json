{"ast":null,"code":"import camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountDiscriminator, accountSize } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\nexport default class AccountFactory {\n  static build(idl, coder, programId, provider) {\n    const accountFns = {};\n    idl.accounts.forEach(idlAccount => {\n      const name = camelCase(idlAccount.name);\n      accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n    });\n    return accountFns;\n  }\n\n}\nexport class AccountClient {\n  constructor(idl, idlAccount, programId, provider, coder) {\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._size = ACCOUNT_DISCRIMINATOR_SIZE + accountSize(idl, idlAccount);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n\n\n  get size() {\n    return this._size;\n  }\n  /**\n   * Returns the program ID owning all accounts.\n   */\n\n\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the client's wallet and network provider.\n   */\n\n\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Returns the coder.\n   */\n\n\n  get coder() {\n    return this._coder;\n  }\n  /**\n   * Returns a deserialized account.\n   *\n   * @param address The address of the account to fetch.\n   */\n\n\n  async fetch(address) {\n    const accountInfo = await this._provider.connection.getAccountInfo(translateAddress(address));\n\n    if (accountInfo === null) {\n      throw new Error(`Account does not exist ${address.toString()}`);\n    } // Assert the account discriminator is correct.\n\n\n    const discriminator = await accountDiscriminator(this._idlAccount.name);\n\n    if (discriminator.compare(accountInfo.data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n\n    return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);\n  }\n  /**\n   * Returns all instances of this account type for the program.\n   */\n\n\n  async all(filter) {\n    let bytes = await accountDiscriminator(this._idlAccount.name);\n\n    if (filter !== undefined) {\n      bytes = Buffer.concat([bytes, filter]);\n    }\n\n    let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n      commitment: this._provider.connection.commitment,\n      filters: [{\n        memcmp: {\n          offset: 0,\n          bytes: bs58.encode(bytes)\n        }\n      }]\n    });\n    return resp.map(_ref => {\n      let {\n        pubkey,\n        account\n      } = _ref;\n      return {\n        publicKey: pubkey,\n        account: this._coder.accounts.decode(this._idlAccount.name, account.data)\n      };\n    });\n  }\n  /**\n   * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n   * changes.\n   */\n\n\n  subscribe(address, commitment) {\n    if (subscriptions.get(address.toString())) {\n      return subscriptions.get(address.toString()).ee;\n    }\n\n    const ee = new EventEmitter();\n    address = translateAddress(address);\n\n    const listener = this._provider.connection.onAccountChange(address, acc => {\n      const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n\n      ee.emit(\"change\", account);\n    }, commitment);\n\n    subscriptions.set(address.toString(), {\n      ee,\n      listener\n    });\n    return ee;\n  }\n  /**\n   * Unsubscribes from the account at the given address.\n   */\n\n\n  unsubscribe(address) {\n    let sub = subscriptions.get(address.toString());\n\n    if (!sub) {\n      console.warn(\"Address is not subscribed\");\n      return;\n    }\n\n    if (subscriptions) {\n      this._provider.connection.removeAccountChangeListener(sub.listener).then(() => {\n        subscriptions.delete(address.toString());\n      }).catch(console.error);\n    }\n  }\n  /**\n   * Returns an instruction for creating this account.\n   */\n\n\n  async createInstruction(signer, sizeOverride) {\n    const size = this.size;\n    return SystemProgram.createAccount({\n      fromPubkey: this._provider.wallet.publicKey,\n      newAccountPubkey: signer.publicKey,\n      space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n      lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n      programId: this._programId\n    });\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated account. Args are keys to associate.\n   * Order matters.\n   */\n\n\n  async associated() {\n    const addr = await this.associatedAddress(...arguments);\n    return await this.fetch(addr);\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated address. Args are keys to associate.\n   * Order matters.\n   */\n\n\n  async associatedAddress() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return await pubkeyUtil.associated(this._programId, ...args);\n  }\n\n} // Tracks all subscriptions.\n\nconst subscriptions = new Map();","map":{"version":3,"mappings":"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","names":["camelCase","EventEmitter","bs58","SystemProgram","Coder","ACCOUNT_DISCRIMINATOR_SIZE","accountDiscriminator","accountSize","translateAddress","getProvider","pubkeyUtil","AccountFactory","build","idl","coder","programId","provider","accountFns","accounts","forEach","idlAccount","name","AccountClient","constructor","_idlAccount","_programId","_provider","_coder","_size","size","fetch","address","accountInfo","connection","getAccountInfo","Error","toString","discriminator","compare","data","slice","decode","all","filter","bytes","undefined","Buffer","concat","resp","getProgramAccounts","commitment","filters","memcmp","offset","encode","map","pubkey","account","publicKey","subscribe","subscriptions","get","ee","listener","onAccountChange","acc","emit","set","unsubscribe","sub","console","warn","removeAccountChangeListener","then","delete","catch","error","createInstruction","signer","sizeOverride","createAccount","fromPubkey","wallet","newAccountPubkey","space","lamports","getMinimumBalanceForRentExemption","associated","addr","associatedAddress","args","Map"],"sourceRoot":"","sources":["../../../../src/program/namespace/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}