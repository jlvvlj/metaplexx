{"ast":null,"code":"import { snakeCase } from \"snake-case\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlError } from \"../error\";\nexport function accountSize(idl, idlAccount) {\n  if (idlAccount.type.kind === \"enum\") {\n    let variantSizes = idlAccount.type.variants.map(variant => {\n      if (variant.fields === undefined) {\n        return 0;\n      }\n\n      return variant.fields // @ts-ignore\n      .map(f => {\n        // @ts-ignore\n        if (f.name === undefined) {\n          throw new Error(\"Tuple enum variants not yet implemented.\");\n        } // @ts-ignore\n\n\n        return typeSize(idl, f.type);\n      }).reduce((a, b) => a + b);\n    });\n    return Math.max(...variantSizes) + 1;\n  }\n\n  if (idlAccount.type.fields === undefined) {\n    return 0;\n  }\n\n  return idlAccount.type.fields.map(f => typeSize(idl, f.type)).reduce((a, b) => a + b);\n} // Returns the size of the type in bytes. For variable length types, just return\n// 1. Users should override this value in such cases.\n\nfunction typeSize(idl, ty) {\n  switch (ty) {\n    case \"bool\":\n      return 1;\n\n    case \"u8\":\n      return 1;\n\n    case \"i8\":\n      return 1;\n\n    case \"i16\":\n      return 2;\n\n    case \"u16\":\n      return 2;\n\n    case \"u32\":\n      return 4;\n\n    case \"i32\":\n      return 4;\n\n    case \"u64\":\n      return 8;\n\n    case \"i64\":\n      return 8;\n\n    case \"u128\":\n      return 16;\n\n    case \"i128\":\n      return 16;\n\n    case \"bytes\":\n      return 1;\n\n    case \"string\":\n      return 1;\n\n    case \"publicKey\":\n      return 32;\n\n    default:\n      // @ts-ignore\n      if (ty.vec !== undefined) {\n        return 1;\n      } // @ts-ignore\n\n\n      if (ty.option !== undefined) {\n        // @ts-ignore\n        return 1 + typeSize(idl, ty.option);\n      } // @ts-ignore\n\n\n      if (ty.defined !== undefined) {\n        // @ts-ignore\n        const filtered = idl.types.filter(t => t.name === ty.defined);\n\n        if (filtered.length !== 1) {\n          throw new IdlError(`Type not found: ${JSON.stringify(ty)}`);\n        }\n\n        let typeDef = filtered[0];\n        return accountSize(idl, typeDef);\n      } // @ts-ignore\n\n\n      if (ty.array !== undefined) {\n        // @ts-ignore\n        let arrayTy = ty.array[0]; // @ts-ignore\n\n        let arraySize = ty.array[1]; // @ts-ignore\n\n        return typeSize(idl, arrayTy) * arraySize;\n      }\n\n      throw new Error(`Invalid type ${JSON.stringify(ty)}`);\n  }\n} // Not technically sighash, since we don't include the arguments, as Rust\n// doesn't allow function overloading.\n\n\nexport function sighash(nameSpace, ixName) {\n  let name = snakeCase(ixName);\n  let preimage = `${nameSpace}:${name}`;\n  return Buffer.from(sha256.digest(preimage)).slice(0, 8);\n}","map":{"version":3,"mappings":"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","names":["snakeCase","sha256","IdlError","accountSize","idl","idlAccount","type","kind","variantSizes","variants","map","variant","fields","undefined","f","name","Error","typeSize","reduce","a","b","Math","max","ty","vec","option","defined","filtered","types","filter","t","length","JSON","stringify","typeDef","array","arrayTy","arraySize","sighash","nameSpace","ixName","preimage","Buffer","from","digest","slice"],"sourceRoot":"","sources":["../../../src/coder/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}